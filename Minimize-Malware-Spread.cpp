/*
 * 924. Minimize Malware Spread
 * https://leetcode.com/problems/minimize-malware-spread/
 */
 
 
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial)
    {
	if (initial.size() == 0) {
		return -1;
	}

	vector<int> unionFind;
	for (int i = 0; i < graph.size(); i++) {
		unionFind.push_back(i);
	}

	vector<int> numOfNodes;
	numOfNodes.assign(graph.size(), 1);


	for (int i = 0; i < graph.size(); i++) {

		
		for (int n = 0; n < graph.size(); n++) {

			if (graph[i][n] == 1 && n != i) {

				if (unionFind[i] < unionFind[n]) {
					numOfNodes[unionFind[i]] = numOfNodes[unionFind[i]] + 1;
					numOfNodes[unionFind[n]] = numOfNodes[unionFind[n]] - 1;
					unionFind[n] = unionFind[i];
				}
				else if(unionFind[n] < unionFind[i]) {
					numOfNodes[unionFind[n]] = numOfNodes[unionFind[n]] + 1;
					numOfNodes[unionFind[i]] = numOfNodes[unionFind[i]] - 1;
					unionFind[i] = unionFind[n];
				}

			}
		}
	}

	int index = initial[0];
	int maxNodes = -1;

	for (int i = 0; i < initial.size(); i++) {
		if (numOfNodes[unionFind[initial[i]]] > maxNodes) {
			maxNodes = numOfNodes[unionFind[initial[i]]];
			index = initial[i];
		}
		else if (numOfNodes[unionFind[initial[i]]] == maxNodes && initial[i] < index) {
			index = initial[i];
		}
	}

	return index;
}
};
